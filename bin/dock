#!/usr/bin/env python3
"""
Copyright 2018 Pedro Santos <pedrosans@gmail.com>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
"""

import time, gc
import numpy as np
from bio.parameters99ff import Parameters
from bio.pdb import Molecule
from bio.molecular_dynamics import ForceField
from bio.topology import Topology
from inf.optimization import GradientDescent, Pso


class Docking:

	def __init__(self, complex=None, ligand=None, receptor=None):
		self.complex = complex
		self.ligand = ligand
		starting_point = np.array([11.102, 24.461, 1.386])
		# starting_point += np.array([-15]*3)
		# starting_point = np.array([0,0,0])
		current_point = self.ligand.atoms[0].point
		delta_to_starting_point = starting_point - current_point
		self.ligand.translate(delta_to_starting_point)
		self.ligand.reset_starting_point()
		self.ligand.write('/home/pedro/tmp', 'moved-ligand.pdb')

		self.receptor = receptor
		self.parameters = Parameters()
		self.complex.set_force_field_parameters(self.parameters)
		self.ligand.set_force_field_parameters(self.parameters)
		self.receptor.set_force_field_parameters(self.parameters)
		# self.receptor.write('/home/pedro/tmp', 'moved-receptor.pdb')

		self.ff = ForceField(self.parameters)
		print('## receptor ##')
		self.receptor_energy = self.ff.calculate_energy(self.receptor.get_topology(), test_electrostatic_only=True)
		self.ff.print_energy()

		print('## ligand ##')
		self.ligand_energy = self.ff.calculate_energy(self.ligand.get_topology(), test_electrostatic_only=True)
		self.ff.print_energy()

		self.complex_topology = Topology(self.receptor, self.parameters)
		self.complex_topology.read_bonds_from_ff()
		self.complex_topology.mount_topology()
		self.complex_topology.add_participant(self.ligand.get_topology())

		self.dock_topology = Topology(self.receptor, self.parameters)
		self.dock_topology.read_bonds_from_ff()
		self.dock_topology.mount_topology()
		self.dock_topology.clear_electrostatic_map()
		self.dock_topology.mount_interface_to(self.ligand.get_topology())

		print('## complex ##')
		self.complex_energy = self.ff.calculate_energy(self.complex_topology, test_electrostatic_only=True)
		self.ff.print_energy()

		print('## dock ##')
		self.ff.calculate_energy(self.dock_topology, test_electrostatic_only=True)
		self.ff.print_energy()

		self.docking_energy = self.complex_energy - self.ligand_energy - self.receptor_energy
		print('Ligand energy:   {:15.3f}'.format(self.ligand_energy))
		print('Receptor energy: {:15.3f}'.format(self.receptor_energy))
		print('Complex energy:  {:15.3f}'.format(self.complex_energy))
		print('Docking energy:  {:15.3f}'.format(self.docking_energy))

		self.pso = Pso(self.complex_energy_function, dimensions_number=3)
		self.pso.set_bounds(-15, 15)
		self.pso.dimensions_number = 3
		self.pso.number_of_particles = 70
		self.pso.iterations = 50
		self.pso.personal_best_retention = 0.001
		self.pso.global_best_retention = 0.005
		self.pso.inertia = 1

	def complex_energy_function(self, particle):
		self.apply_particle(particle)
		# complex_e = self.ff.calculate_energy(self.complex_topology, test_electrostatic_only=True)
		# return complex_e - self.ligand_energy - self.receptor_energy
		return self.ff.calculate_energy(self.dock_topology, test_electrostatic_only=True)

	def apply_particle(self, particle):
		self.ligand.translate_starting_point(particle.dimensions)

	def run(self):
		optimization = self.pso
		optimization.run()
		self.apply_particle(optimization.best_particle)
		self.ff.calculate_energy(self.complex_topology, test_electrostatic_only=True)
		self.ff.print_energy()
		import sys
		if len(sys.argv) > 1:
			self.ligand.write('/home/pedro/tmp', 'best-ligand-' + sys.argv[1] + '.pdb')
		else:
			self.ligand.write('/home/pedro/tmp', 'best-ligand.pdb')


m_cristal = Molecule(pdb_file_location='/home/pedro/tmp/docking/cristal.pdb')
m_ligante = Molecule(pdb_file_location='/home/pedro/tmp/docking/ligante.pdb')
m_receptor = Molecule(pdb_file_location='/home/pedro/tmp/docking/receptor.pdb')

docking = Docking(complex=m_cristal, ligand=m_ligante, receptor=m_receptor)
start_time = time.time()
docking.run()
print("\t\t\t\t\t\t\t\t\t\t\tDocking function executed in: %s seconds" % (time.time() - start_time))
