#!/usr/bin/env python3
"""
Copyright 2018 Pedro Santos <pedrosans@gmail.com>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
"""

import time, gc
from bio.parameters99ff import Parameters
from bio.pdb import Molecule
from bio.molecular_dynamics import ForceField
from inf.optimization import GradientDescent, Pso


class Docking:

	def __init__(self, complex=None, ligand=None, receptor=None):
		self.complex = complex
		self.ligand = ligand
		self.receptor = receptor
		self.parameters = Parameters()
		self.complex.set_force_field_parameters(self.parameters)
		self.ligand.set_force_field_parameters(self.parameters)
		self.receptor.set_force_field_parameters(self.parameters)

		self.force_field = ForceField(self.parameters)
		self.force_field.calculate_energy(self.receptor.get_topology())
		self.force_field.print_energy()
		self.receptor_energy = self.force_field.energy

		self.force_field.calculate_energy(self.ligand.get_topology(), test_electrostatic_only=True)
		self.force_field.print_energy()
		self.ligand_energy = self.force_field.energy


		complex_topology = self.receptor.get_topology()
		complex_topology.add_participant(self.ligand.get_topology())
		self.force_field.calculate_energy(complex_topology)
		self.force_field.print_energy()
		self.complex_energy = self.force_field.energy

		self.iterations = 1

		self.optimization = Pso(self.molecule_energy_function)

	def molecule_energy_function(self, particle):
		a = self.atoms[self.atom_index]
		a.translate(particle.position)
		return self.force_field.calculate_energy(self.molecule)

	def show_atom(self):
		atom = self.atoms[self.atom_index]
		print('Energy for atom({:d}) {}'.format(atom.serial, atom.name))
		self.force_field.calculate_energy(self.molecule, atom)
		self.force_field.print_energy()

	def show_molecule(self):
		self.force_field.calculate_energy(self.molecule)
		self.force_field.print_energy()

	def _print_iteration(self, i, j, atom):
		self.force_field.calculate_energy(self.molecule)
		rmsd = self.original_molecule.rmsd(self.molecule)
		print('\t{:03}\t{:03}\t{:10.5f}\t{:10.7f}\t{}-{}({:03})'.format(i, j, self.force_field.energy, rmsd, atom.res_name, atom.name, atom.serial))

	def run_per_atom(self):
		for i in range(self.iterations):
			self.atom_index = 0
			# self._sort_by_energy()
			m.reset_starting_point()
			for j in range(self.number_of_atoms):
				self.optimization.run()
				atom = self.atoms[self.atom_index]
				atom.translate_starting_point(self.optimization.best_particle.dimensions)
				self.atom_index += 1
				self._print_iteration(i, j, atom)
			print('Molecule energy at the end of iteration {}: '.format(i))
			self.show_molecule()
			m.write('/home/pedro/tmp', 'optimized-{:02}.pdb'.format(i))


m_cristal = Molecule(pdb_file_location='/home/pedro/tmp/docking/cristal.pdb')
m_ligante = Molecule(pdb_file_location='/home/pedro/tmp/docking/ligante.pdb')
m_receptor = Molecule(pdb_file_location='/home/pedro/tmp/docking/receptor.pdb')

docking = Docking(complex=m_cristal, ligand=m_ligante, receptor=m_receptor)
start_time = time.time()
# docking.run()
print("\t\t\t\t\t\t\t\t\t\t\tDocking function executed in: %s seconds" % (time.time() - start_time))
