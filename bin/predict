#!/usr/bin/env python3
"""
Copyright 2018 Pedro Santos <pedrosans@gmail.com>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
"""

import time, gc
from bio.parameters99ff import Parameters
from bio.pdb import Molecule
from bio.molecular_dynamics import ForceField
from inf.optimization import GradientDescent, Pso


class Prediction:

	def __init__(self, molecule):
		self.computations = 0
		self.molecule = molecule
		self.length = len(molecule.amino_acids)
		self.original_molecule = molecule.copy()
		self.parameters = Parameters()
		self.force_field = ForceField(self.parameters)
		self.molecule.set_force_field_parameters(self.parameters)
		self.topology = self.molecule.get_topology()
		self.phi = self.topology.get_phi_angles()
		self.psi = self.topology.get_psi_angles()

		self.pso = Pso(self.molecule_energy)
		self.pso.set_bounds(-180, 180)
		self.pso.dimensions_number = self.length * 2
		self.pso.number_of_particles = 80
		self.pso.iterations = 30
		self.pso.personal_best_retention = 0.003
		self.pso.global_best_retention = 0.03
		self.pso.inertia = 1

		self.gd = GradientDescent(self.molecule_energy, debug=True)
		self.gd.dimensions_number = self.length * 2
		self.gd.precision = 0.01
		self.gd.small_step = 0.0015
		self.gd.smallest_step = self.gd.small_step / 32
		self.gd.iterations = 20

	def molecule_energy(self, particle):
		self.computations += 1
		self.apply_particle(particle)
		return self.force_field.calculate_energy(self.molecule, test_phi_psi_torsions_only=True)
		# return self.force_field.calculate_energy(self.molecule, test_phi_psi_torsions_only=False)

	def apply_particle(self, particle):
		self.molecule.restore_starting_point()
		phi_angles = particle.dimensions[:self.length]
		psi_angles = particle.dimensions[self.length:]
		for i in range(self.length):
			phi_angles[i] = self.phi[i] - phi_angles[i]
			psi_angles[i] = self.psi[i] - psi_angles[i]
		topology = self.molecule.get_topology()
		topology.rotate_backbone('PHI', phi_angles)
		topology.rotate_backbone('PSI', psi_angles)

	def run(self):
		optimization = self.pso
		optimization.run()
		self.apply_particle(optimization.best_particle)
		self.force_field.calculate_energy(self.molecule)
		self.force_field.print_energy()
		import sys
		if len(sys.argv) > 1:
			m.write('/home/pedro/tmp', 'best-' + sys.argv[1] + '.pdb')
		else:
			m.write('/home/pedro/tmp', 'best.pdb')


# from bio.fasta import Fasta
# omegas = [None, 176.376, 180.000, 174.874, 175.561, 171.494, 177.437, 180.000, 174.268, 180.000, 180.000, 177.437, 176.376, 176.376, 175.561, 172.748, 180.000, 177.437, 176.376, 171.494]
# input = 'NLYIQWLKDGGPSSGRPPPS'
# fasta_sequence = Fasta(input)
# m = fasta_sequence.to_pdb()

# m = Molecule(pdb_file_location='/home/pedro/tmp/predicao-01/best-2.pdb')
m = Molecule(pdb_file_location='/home/pedro/tmp/generated.pdb')
TC5B = Molecule(pdb_file_location='/home/pedro/tmp/1l2y-01.pdb')

minimization = Prediction(m)
start_time = time.time()
minimization.run()
print('computations: {}'.format(minimization.computations))
print("\tExecuted in: %s seconds" % (time.time() - start_time))

